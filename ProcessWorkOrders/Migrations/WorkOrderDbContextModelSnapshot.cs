// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProcessWorkOrders.Context;

namespace ProcessWorkOrders.Migrations
{
    [DbContext(typeof(WorkOrderDbContext))]
    partial class WorkOrderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProcessWorkOrders.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ProcessWorkOrders.Models.Roll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Gauge")
                        .HasColumnType("float");

                    b.Property<double?>("Length")
                        .HasColumnType("float");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantityPer")
                        .HasColumnType("int");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.Property<int>("WorkOrderWorkOrderNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderWorkOrderNumber");

                    b.ToTable("Rolls");
                });

            modelBuilder.Entity("ProcessWorkOrders.Models.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Construction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtrusionInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InventoryItemNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFda")
                        .HasColumnType("bit");

                    b.Property<string>("LabelingInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintingInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintingUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("RunSpeed")
                        .HasColumnType("float");

                    b.Property<int>("SalesOrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("VentingUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkCenter")
                        .HasColumnType("int");

                    b.HasKey("WorkOrderNumber");

                    b.HasIndex("CustomerId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("ProcessWorkOrders.Models.Roll", b =>
                {
                    b.HasOne("ProcessWorkOrders.Models.WorkOrder", null)
                        .WithMany("Rolls")
                        .HasForeignKey("WorkOrderWorkOrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProcessWorkOrders.Models.WorkOrder", b =>
                {
                    b.HasOne("ProcessWorkOrders.Models.Customer", null)
                        .WithMany("WorkOrders")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("ProcessWorkOrders.Models.Customer", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ProcessWorkOrders.Models.WorkOrder", b =>
                {
                    b.Navigation("Rolls");
                });
#pragma warning restore 612, 618
        }
    }
}
